%{
#include <iostream>
#include <stdlib.h>
#include <string>
#include <map>
#include "transformacije.hpp"
#include "ast.hpp"

#include "vektor.hpp"
  using namespace std;

#define YYDEBUG 1
  // funkcija za obradu gresaka
  void yyerror(string s) {
    cerr<<s<<endl;
    exit(EXIT_FAILURE);
  }

  // leksicki analizator
  extern int yylex();

  //tablica simbola
  map<string, Vektor> tablica_vektora;

  /* 0 - interpretacija
     1 - kompilacija 
     2 - llvm
  */
  int mode = 0;

  /* globalne promenljive koje mi trebaju i u main-u, i u ast.cpp */
  StructType *VektorTip;
  Function *PrintfFja;
  Value *Str;
  Function *MainFja;

%}

%union {
  string *s_attr;
  double num_attr;
  SynTree *syntree_attr;
  vector< pair <string, SynTree* > > *vec1_attr;
  vector< SynTree* > *vec2_attr;
  Transformation *t_attr;
}

%token vector_token print_token scaling_token
%token <s_attr> id_vektora_token
%token <num_attr> num_token

%type <syntree_attr> Vektor IzrazSaVektorima Inic_vektora Program Line
%type <vec1_attr> Niz_vektora
%type <vec2_attr> Lines
%type <t_attr> T


%left '+' '-'
%left '*'

%%
 // program je niz linija
Program: Lines {
  $$ = new Block(*$1);
  delete $1;
  if (!mode)
    $$->interpret();
  else
    $$->codegen();
  delete $$;
 }
;
Lines : Lines Line {
  $$ = $1;
  $$->push_back($2);
 }
| Line {
  $$ = new vector<SynTree*>();
  $$->push_back($1);
  }
;

// linija moze biti deklaracija vektora
Line : vector_token Niz_vektora ';'  {
  $$ = new Declaration(*$2);
  delete $2;
 }
// stampanje izraza nad vektorima
| print_token IzrazSaVektorima ';' {
  $$ = new Print($2);
 }
// menjanje vrednosti vec definisanog vektora
| id_vektora_token '=' IzrazSaVektorima ';'  {
  $$ = new Assign(*$1, $3);
  delete $1;
  }
;

// niz vektora pri deklaraciji
Niz_vektora : Niz_vektora ',' id_vektora_token Inic_vektora  {
  $$ = $1;
  $$->push_back(pair<string, SynTree*>(*$3, $4));
  delete $3;
 }
| id_vektora_token Inic_vektora  {
  $$ = new vector< pair < string, SynTree* > >();
  $$->push_back(pair<string, SynTree*>(*$1, $2));
  delete $1;
 }
;

// Eventualna dodela vrednosi definisanom vektoru
Inic_vektora :  '=' IzrazSaVektorima  {
  $$ = $2;
 }
|  {
  $$ = new ConstVector(Vektor());
 }
;

// Izraz cija je vrednost vektor
IzrazSaVektorima : IzrazSaVektorima '+' IzrazSaVektorima  {
  $$ = new Add($1, $3);
 }
| IzrazSaVektorima '-' IzrazSaVektorima {
  $$ = new Sub($1, $3);
  }
| num_token '*' IzrazSaVektorima  {
  $$ = new Mul($1, $3);
  }
| '(' IzrazSaVektorima ')'  {
  $$ = $2;
  }
| Vektor  {
  $$ = $1;
  }
| id_vektora_token  {
  $$ = new Variable(*$1);
  delete $1;
  }
| T '(' IzrazSaVektorima ')' {
  $$ = new TransformNode($1, $3);
  }
;

//koordinate vektora
Vektor : '[' num_token ',' num_token ']'  {
  $$ = new ConstVector(Vektor($2, $4));
 }
;

// transformacija moze biti jedno od sledeceg
T: scaling_token '(' num_token ')' {
  $$ = new Scaling($3);
  }
;

%%

extern Module* TheModule;
extern LLVMContext TheContext;
extern IRBuilder<> Builder;

int main(int argc, char **argv) {
  //  yydebug = 1;

  if (argc > 1) {
    if (string(argv[1]) == string("--llvm"))
      mode = 1;
    else if (string(argv[1]) == string("--compile"))
      mode = 2;
  }

  InitializeModuleAndPassManager();

  /* printf fja */
  FunctionType *FT1 = FunctionType::get(IntegerType::getInt32Ty(TheContext), PointerType::get(Type::getInt8Ty(TheContext), 0), true);
  PrintfFja = Function::Create(FT1, Function::ExternalLinkage, "printf", TheModule);
  
  /* fja main */
  vector<Type*> v(0);
  FunctionType* FT2 = FunctionType::get(Type::getInt32Ty(TheContext), v, false);
  MainFja = Function::Create(FT2, Function::ExternalLinkage, "main", TheModule);
  BasicBlock *BB = BasicBlock::Create(TheContext, "entry", MainFja);
  Builder.SetInsertPoint(BB);
  
  /* globalni string potreban za ispis vektora */
  Str = Builder.CreateGlobalStringPtr("[%g, %g]\n");
  
  /* struktura vektor u ravni, sa x i y koordinatama tipa double */
  VektorTip = StructType::create(TheContext, "vektor");;
  vector<Type*> Members;
  Members.push_back(Type::getDoubleTy(TheContext));
  Members.push_back(Type::getDoubleTy(TheContext));
  VektorTip->setBody(Members);
  
  yyparse();

  /* zavrsetak main fje */
  Builder.CreateRet(ConstantInt::get(TheContext, APInt(32, 0)));
  verifyFunction(*MainFja);
  
  /* ispis llvm koda */
  if (mode == 1) {
    TheModule->dump();
  }
  /* kompilacija */
  else if (mode == 2) {
    string TargetTriple = "x86_64-pc-linux-gnu";
    LLVMInitializeAllTargetInfos();
    LLVMInitializeAllTargets();
    LLVMInitializeAllTargetMCs();
    LLVMInitializeAllAsmParsers();
    LLVMInitializeAllAsmPrinters();
    
    string Error;
    auto Target = TargetRegistry::lookupTarget(TargetTriple, Error);  
    
    if (!Target) {
      cerr << Error;
      return 1;
    }
    
    auto CPU = "generic";
    auto Features = "";
    
    TargetOptions opt;
    auto RM = Reloc::Model();
    auto TargetMachine = Target->createTargetMachine(TargetTriple, CPU, Features, opt, RM);
    
    TheModule->setDataLayout(TargetMachine->createDataLayout());
    TheModule->setTargetTriple(TargetTriple);
    
    string Filename = "output.o";
    error_code EC;
    raw_fd_ostream dest(Filename, EC, sys::fs::F_None);
    
    if (EC) {
      cerr << "Could not open file: " << EC.message();
      return 1;
    }
    
    legacy::PassManager pass;
    auto FileType = TargetMachine::CGFT_ObjectFile;
    
    if (TargetMachine->addPassesToEmitFile(pass, dest, FileType)) {
      cerr << "TargetMachine can't emit a file of this type";
      return 1;
    }
    
    pass.run(*TheModule);
    dest.flush();  
  }
  
  /* brisanje modula */
  delete TheModule;

  return EXIT_SUCCESS;
}
