%{
#include <iostream>
#include <cstdlib>
#include <map>
#include "ast.hpp"

#define YYDEBUG 1

using namespace std;

void yyerror(string s){
  cerr<<s<<endl;
  exit(EXIT_FAILURE);
}

int yylex();

map<string,unsigned> tablica;
Value* Str;
Value* Str1;
Function* PrintFja;
Function* MainFja;
%}

%union{
   ExprAST *e;
   unsigned u;
   string *s;
   vector<ExprAST*> *v;
   vector<string> *v1;
   PrototypeAST *p;
   vector< pair<string, ExprAST*> > *v2;
   pair<string, ExprAST*> *p1;
}

%type <e> E PozivFje Naredba Program
%type <v> NizNaredbi
%type <v1> NizParametara
%type <p> Potpis
%type <v2> NizDeklaracija
%type <p1> Deklaracija

%token <u> num_token
%token <s> id_token id_liste_token
%token main_token print_token and_token or_token xor_token not_token shl_token shr_token set_token to_token



%left or_token
%left xor_token
%left and_token
%left shr_token
%left shl_token
%right not_token

%%
Program: main_token '(' ')' '{' NizNaredbi '}' {
   for(unsigned i = 0; i < $5->size(); i++) {
      (*$5)[i]->codegen();
   }
   for(unsigned i = 0; i < $5->size(); i++) {
      delete (*$5)[i];
   }
   delete $5;
   endOfMain();
}
;
NizNaredbi: NizNaredbi ';' Naredba {
   $$ = $1;
   $$->push_back($3);
}
| Naredba {
   $$ = new vector<ExprAST *>();
   $$->push_back($1);
}
;
Naredba: print_token E {
   $$ = new PrintExprAST($2);
}
|set_token id_token to_token E {
   $$ = new AssignExprAST(*$2, $4);
   delete $2;
}
;
E: E and_token E {
   $$ = new AndExprAST($1, $3);
}
|E or_token E {
   $$ = new OrExprAST($1, $3);
}
|E xor_token E {
   $$ = new XorExprAST($1, $3);
}
|not_token E {
   $$ = new NotExprAST($2);
}
|E shl_token E {
   $$ = new ShlExprAST($1, $3);
}
|E shr_token E {
   $$ = new ShrExprAST($1, $3);
}
|num_token {
   $$ = new NumberExprAST($1);
}
|'(' E ')' {
   $$ = $2;
}
|id_token {
   $$ = new VariableExprAST(*$1);
   delete $1;
}
;
%%

int main(){
   // yydebug = 1;
   InitializeModuleAndPassManager();   
   yyparse();
   printModule();
   return 0;
}
